#Version 3.2: Frank Everest, David Whale, James Dalley# December 2013#Basic servo demo code for GPIO connector pin 26 (signal name GPIO7)## >>>>>>> Do NOT power-up the servo using the Pi's 5V  <<<<<<<<<<<# >>>>>>>      if you are looking at this code!        <<<<<<<<<<<## Shut down the Pi, take out the power lead, connect the servo# check the wiring, recheck, then reboot the Pi, run and enjoy/adapt.#import librariesimport RPi.GPIO as GPIOimport time#initialise the portsGPIO.setmode(GPIO.BCM)  #Use the BCM signal namesGPIO.setup(7,GPIO.OUT)  #GPIO connector pin 26 (signal name GPIO7)#Servo parameters# Short pulse: servo swings one way, long pulse: swings other way.# The pulse width determines the servo's final position.# Must repeat every 20msSHORTEST = 0.001    # 1ms = 0.001sLONGEST = 0.00225   # 2.25ms = 0.00225sPERIOD = 0.02       # 20ms = 0.02s#Function to send one pulse to the servodef PWM(ON, OFF):    #(ON + OFF) must be = the repetiion rate: 20ms for this demo    GPIO.output(7,True)         time.sleep(ON)          # pulse width determines final position    GPIO.output(7,False)    time.sleep(OFF)         # makes up the remaining 20ms#Function to send 20 pulses to the servo# This gives servo time to get into position)# Servo will jitter if you give it too little timedef send_command(PULSE):    #PULSE should be in the range 0.001 to 0.00225 seconds    for pulseNumber in range(20):   # can increase/decrease from 20        PWM(PULSE,PERIOD-PULSE)#Main code# Makes servo swing one way, wait, then the other# Press Ctrl+c on keyboard to stop the code and exit properlytry:    while True:                 # loop forever        send_command(LONGEST)   # swing one way (to a position)        time.sleep(1)           # wait one sec        send_command(SHORTEST)  # swing other way (to new position)        time.sleep(1)           # wait one secexcept:        GPIO.cleanup()          # tidy-up the GPIO ports before exiting